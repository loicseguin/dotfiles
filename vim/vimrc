set nocompatible   " Break backward compatibility with vi
set nomodeline     " Avoid some security issues with modelines

" vim-plug package management {{{
call plug#begin()
" List of bundles to use
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'jamessan/vim-gnupg'
Plug 'itchyny/lightline.vim'
Plug 'w0ng/vim-hybrid'
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
Plug 'LaTeX-Box-Team/LaTeX-Box'
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
"Plug 'vim-pandoc/vim-pandoc'
"Plug 'vim-pandoc/vim-pandoc-syntax'
"Plug 'vim-pandoc/vim-rmarkdown'
call plug#end()
" }}}

" General options {{{
"""""""""""""""""
set hidden                      " Hide file instead of closing it
set autoread                    " Reread file automatically if modified outside of Vim
set autowrite                   " Write file automatically upon some actions (see help)
set history=1000                " Longer history
set encoding=utf-8              " Default encoding
set visualbell t_vb=            " Disable the bell
set path=**                     " Search all files in current directory
set backspace=indent,eol,start  " Backspace for dummies
set gdefault                    " Replace globally by default (i.e., g at the end of substitutions
" }}}

" Vim UI {{{
""""""""
set showmatch                   " Highlight matching parentheses
set wildmenu                    " Show command auto-completion matches in status line
set wildmode=list:longest,full  " Command completion, list matches, then longest common part, then all.
set wildignore=*.pyc,*.bak      " Ignore these patterns in filename completions
set relativenumber              " Show relative line numbers
set number                      " Show line number of current line
set laststatus=2                " Show status line
set noshowmode                  " Don't show mode since it is in status line
let g:lightline = {'colorscheme': 'seoul256'}

" Colors
if has("gui_running")
    set background=dark
    "let g:material_terminal_italics = 1
    "let g:material_theme_style = 'default'
    colorscheme gruvbox
    set guioptions-=rL " Disable scrollbars
    set guioptions-=T  " Disable toolbar
    set guioptions-=m  " Disable menubar
else
    set t_Co=256  " I can do 256 colors!
    set bg=dark
    colorscheme gruvbox
    let g:lightline = {'colorscheme': 'seoul256'}
endif

" Fonts
if has("mac")
    set guifont=Monaco:h12
    set guioptions+=m  " Menu bar in mac OS
elseif has("gui_win32")
    set guifont=Consolas:h11
else
    set guifont=monospace
endif
set linespace=3

" Show hidden characters
"set list
set listchars=tab:▸\ ,eol:¬,trail:⋅,nbsp:␣

" }}}

" Persistent undo {{{
"""""""""""""""""
if has('persistent_undo')
    set undofile
    set undolevels=1000
    set undoreload=10000
endif
" }}}

" Backups {{{
"""""""""
set backup
set noswapfile
if has("win32") || has("win64")
    set undodir=$HOME/vimfiles/tmp/undo/
    set backupdir=$HOME/vimfiles/tmp/backup/
else
    set undodir=$HOME/.vim/tmp/undo/
    set backupdir=$HOME/.vim/tmp/backup/
endif
" }}}

" Search options {{{
""""""""""""""""
set incsearch
set hlsearch
set ignorecase
set smartcase
" }}}

" Formatting {{{
""""""""""""
set nowrap         " Do not wrap long lines
set autoindent     " Indent at the same level of the previous line
set tabstop=4      " Use four spaces for tabs
set shiftwidth=4
set softtabstop=4
set expandtab      " Spaces, not tabs
set textwidth=79   " Wrap lines after 79 characters
" }}}

" Key mappings {{{
""""""""""""""
let mapleader=","  " Use comma instead of \ for leader

" Better navigation between split windows
nnoremap <C-j> <C-W><C-j>
nnoremap <C-k> <C-W><C-k>
nnoremap <C-l> <C-W><C-l>
nnoremap <C-h> <C-W><C-h>

" One less keystroke to enter commands
nnoremap ; :

" Yank to end of line with Y
nnoremap Y y$

" Move between screen lines, not real lines
nnoremap j gj
nnoremap k gk

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Close/open folds with space
nnoremap <space> za

" Move between matching brackets with tab in normal mode
nnoremap <tab> <s-%>

" Toggle search highlighting
nnoremap <silent> <leader>hs :set invhlsearch<CR>

" Upper/lowercase a word
nnoremap <leader>u mQviwU`Q
nnoremap <leader>l mQviwu`Q

" Switch to previous buffer
nnoremap <leader>b :b#<CR>

" Quickly edit/reload vimrc file
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>

" Spell checking
nnoremap <leader>st :set spell!<CR>
nnoremap <leader>sf :set spelllang=fr<CR>
nnoremap <leader>se :set spelllang=en<CR>

" Toggle numbering and fold column on and off.
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>

" Delete all trailing spaces in a file.
nnoremap <silent> <F3> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Fugitive plugin keymaps
nnoremap <silent> <leader>gs :Git<CR>
nnoremap <silent> <leader>gc :Git commit<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

" Toggle NERDTree
noremap <leader>n :NERDTreeToggle<CR>

" Go to tag for non US keyboard is broken. Use leader + t instead.
nnoremap <leader>t <C-]>

" }}}

" GnuPG Extensions{{{

" Use gpg
let g:GPGExecutable="gpg"

" Tell the GnuPG plugin to armor new files.
let g:GPGPreferArmor=1

" Tell the GnuPG plugin to sign new files.
let g:GPGPreferSign=1

augroup GnuPGExtra
" Set extra file options.
    autocmd BufReadCmd,FileReadCmd *.\(gpg\|asc\|pgp\) call SetGPGOptions()
" Automatically close unmodified files after inactivity.
    autocmd CursorHold *.\(gpg\|asc\|pgp\) quit
augroup END

function! SetGPGOptions()
" Set updatetime to 1 minute.
    set updatetime=60000
" Fold at markers.
    set foldmethod=marker
" Automatically close all folds.
    set foldclose=all
" Only open folds with insert commands.
    set foldopen=insert
endfunction
" }}}

" NERDTree {{{

let NERDTreeIgnore=['\.pyc$', '__pycache__$[[dir]]']
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

"}}}
