" Break backward compatibility with vi
set nocompatible

" Avoid some security issues with modelines
set nomodeline

" Vundle package management {{{
filetype off
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()

" List of bundles to use
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'jamessan/vim-gnupg'
Plugin 'joshdick/onedark.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'w0ng/vim-hybrid'
Plugin 'PProvost/vim-ps1.git'
Plugin 'tomasr/molokai'
Plugin 'morhetz/gruvbox'
"Plugin 'chriskempson/base16-vim'
"Plugin 'vim-pandoc/vim-pandoc'
"Plugin 'vim-pandoc/vim-pandoc-syntax'
"Plugin 'tpope/vim-surround'
"Plugin 'kien/ctrlp.vim'
"Plugin 'ervandew/supertab'
"Plugin 'MarcWeber/vim-addon-mw-utils'
"Plugin 'tomtom/tlib_vim'
"Plugin 'honza/vim-snippets'
"Plugin 'garbas/vim-snipmate'
"Plugin 'godlygeek/tabular'
call vundle#end()
" }}}

" Syntax highlighting, indentation and automatic file type recognition {{{
filetype plugin indent on
syntax enable
" }}}

" General options {{{
"""""""""""""""""
set hidden         " hide file instead of closing it
set autoread       " reread file automatically if modified outside of Vim
set autowrite      " write file automatically upon some actions (see help)
set history=1000   " longer history
set encoding=utf-8 " default encoding
set vb t_vb=       " Disable the bell
set wildignore=*.pyc,*.bak  " Ignore these patterns in filename completions
set path=**        " Search all files in current directory
set ff=unix        " Always use Unix line endings
" }}}

" Vim UI {{{
""""""""
set backspace=indent,eol,start  " Backspace for dummies
set showmatch                   " highlight matching parentheses
set wildmenu                    " show command auto-completion matches in status line
set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.
set scrolloff=5    " minimum number of lines above or below cursor
set scrolljump=5   " lines to scroll when cursor leaves screen
set number

" Colors
if has("gui_running")
    set background=dark
    colorscheme gruvbox
    set guioptions-=rL " Disable scrollbars
    set guioptions-=T  " Disable toolbar
    set guioptions-=m  " Disable menubar
else
    set t_Co=256  " I can do 256 colors!
    set bg=dark
    colorscheme hybrid
endif

" Font for Mac, Windows and Linux
if has("mac")
    set guifont=Monaco:h13
    set guioptions+=m  " Menu bar in mac OS
elseif has("gui_win32")
    "set guifont=Hack:h10.5
    set guifont=Fantasque\ Sans\ Mono:h12
else
    set guifont=DejaVu\ Sans\ Mono\ 10
endif

" Show hidden characters
set listchars=tab:▸\ ,eol:¬,trail:⋅,nbsp:␣

" Change cursor shape in terminal
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" optional reset cursor on start:
augroup myCmds
    au!
    autocmd VimEnter * silent !echo -ne "\e[2 q"
augroup END
" }}}

" Persistent undo {{{
"""""""""""""""""
if has('persistent_undo')
    set undofile
    set undolevels=1000
    set undoreload=10000
endif
" }}}

" Backups {{{
"""""""""
set backup                       " enable backups
set noswapfile
set undodir=$HOME/.vim/tmp/undo/
set backupdir=$HOME/.vim/tmp/backup/
" }}}

" Search options {{{
""""""""""""""""
set incsearch
set hlsearch
set ignorecase
set smartcase
" }}}

" Formatting {{{
""""""""""""
set nowrap         " do not wrap long lines
set autoindent     " indent at the same level of the previous line
set tabstop=4      " use four spaces for tabs
set shiftwidth=4
set softtabstop=4
set expandtab      " spaces, not tabs
set textwidth=79   " wrap lines after 79 characters
" }}}

" Key mappings {{{
""""""""""""""
" Use comma instead of \ for leader
let mapleader=","

" To normal mode with jk
inoremap jk <Esc>

" One less keystroke to enter commands
nnoremap ; :

" Toggle search highlighting
nnoremap <silent> <leader>hs :set invhlsearch<CR>

" Yank to end of line with Y
nnoremap Y y$

" Move between screen lines, not real lines
nnoremap j gj
nnoremap k gk

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Upper/lowercase a word
nnoremap <leader>u mQviwU`Q
nnoremap <leader>l mQviwu`Q

" Close/open folds with space
nnoremap <space> za

" Move between matching brackets with tab in normal mode
nnoremap <tab> <s-%>

" Switch to previous buffer
nnoremap <leader>b :b#<CR>

" Quickly edit/reload vimrc file
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>

" Toggle spell checking
nnoremap <F1> :set spell!<CR>

" Toggle numbering and fold column on and off.
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>

" Press <F3> to delete all trailing spaces in a file.
nnoremap <silent> <F3> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Fugitive plugin keymaps
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

" Toggle NERDTree
noremap <leader>n :NERDTreeToggle<CR>

" }}}

" Completion {{{
""""""""""""
" Enable omni completion.
augroup omnigroup
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END
" }}}

" Filetype specific options {{{
"""""""""""""""""""""""""""
" Proper filetype for LaTeX
let g:tex_flavor = "latex"
let g:LatexBox_quickfix = 4

" Markdown
augroup markdownmd
    autocmd!
    autocmd BufNewFile,BufRead *.md set ft=markdown
augroup END
let g:markdown_fenced_languages = ["css", "python", "c", "cpp", "sh", "tex", "r", "javascript"]

" Use free format Fortran (yay 21st century)
let fortran_free_source=1

" Fold on marker in vimscript files
augroup filetype_vim
    autocmd!
    autocmd Filetype vim setlocal foldmethod=marker
augroup END

" Fold functions in python files
augroup filetype_python
    autocmd!
    autocmd Filetype python setlocal foldmethod=indent
    autocmd Filetype python setlocal foldnestmax=2
augroup END

" Smaller indentation for some files
augroup smallindent
    autocmd!
    autocmd Filetype r,c,cpp,html,js setlocal tabstop=2
    autocmd Filetype r,c,cpp,html,js setlocal shiftwidth=2
    autocmd Filetype r,c,cpp,html,js setlocal softtabstop=2
augroup END

" }}}

" GnuPG Extensions{{{

" Use gpg
let g:GPGExecutable="gpg"

" Tell the GnuPG plugin to armor new files.
let g:GPGPreferArmor=1

" Tell the GnuPG plugin to sign new files.
let g:GPGPreferSign=1

augroup GnuPGExtra
" Set extra file options.
    autocmd BufReadCmd,FileReadCmd *.\(gpg\|asc\|pgp\) call SetGPGOptions()
" Automatically close unmodified files after inactivity.
    autocmd CursorHold *.\(gpg\|asc\|pgp\) quit
augroup END

function! SetGPGOptions()
" Set updatetime to 1 minute.
    set updatetime=60000
" Fold at markers.
    set foldmethod=marker
" Automatically close all folds.
    set foldclose=all
" Only open folds with insert commands.
    set foldopen=insert
endfunction
" }}}

" Pandoc mode {{{
let g:pandoc#formatting#mode = "ha"
" }}}

" NERDTree {{{

let NERDTreeIgnore=['\.pyc$', '__pycache__$[[dir]]']
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

"}}}

