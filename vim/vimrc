" Break backward compatibility with vi
set nocompatible

" Avoid some security issues with modelines
set nomodeline

" Vundle package management {{{
filetype off
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()

" List of bundles to use
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'scrooloose/nerdcommenter'
Plugin 'kien/ctrlp.vim'
Plugin 'ervandew/supertab'
Plugin 'ervandew/screen'
Plugin 'jcfaria/Vim-R-plugin'
Plugin 'jalvesaq/VimCom'
Plugin 'jalvesaq/R-Vim-runtime'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'honza/vim-snippets'
Plugin 'garbas/vim-snipmate'
Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Plugin 'chriskempson/base16-vim'
Plugin 'godlygeek/tabular'
Plugin 'tomasr/molokai'
Plugin 'nanotech/jellybeans.vim'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
call vundle#end()
" }}}

" Syntax highlighting, indentation and automatic file type recognition {{{
filetype plugin indent on
syntax enable
" }}}

" General options {{{
"""""""""""""""""
set hidden         " hide file instead of closing it
set autoread       " reread file automatically if modified outside of Vim
set autowrite      " write file automatically upon some actions (see help)
set history=1000   " longer history
"set spell         " spell checking
set encoding=utf-8 " default encoding
set vb t_vb=       " Disable the bell
" }}}

" Vim UI {{{
""""""""
if has('statusline')
    " Status line detail:
    " -------------------
    "
    " %f    file name
    " %F    file path
    " %y    file type between braces (if defined)
    "
    " %{v:servername}   server/session name (gvim only)
    "
    " %<    collapse to the left if window is to small
    "
    " %( %) display contents only if not empty
    "
    " %1*   use color preset User1 from this point on (use %0* to reset)
    "
    " %([%R%M]%)   read-only, modified and modifiable flags between braces
    "
    " %=     right-align following items
    "
    " %{&fileencoding}  displays encoding (like utf8)
    " %{&fileformat}    displays file format (unix, dos, etc..)
    " %{&filetype}      displays file type (vim, python, etc..)
    "
    " #%n   buffer number
    " %l/%L line number, total number of lines
    " %p%   percentage of file
    " %c%V  column number, absolute column number
    " &modified         whether or not file was modified
    "
    set laststatus=2
    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}%(\|%{(&fenc!=''?&fenc:&enc)}%)%(\|%{&filetype}%)] " Filetype
    "set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-5.(%l,%c%V%)\ %p%%   " Right aligned file nav info
endif

set ruler                       " Show the ruler
set backspace=indent,eol,start  " Backspace for dummies
set showmatch                   " highlight matching parentheses
set wildmenu                    " show command auto-completion matches in status line
set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.
set scrolloff=5    " minimum number of lines above or below cursor
set scrolljump=5   " lines to scroll when cursor leaves screen
set number
set cursorline
"set colorcolumn=80

set guioptions-=rL " Disable scrollbars
set guioptions-=T  " Disable menu bar

" Font for Mac, Windows and Linux
if has("mac")
    set guifont=Menlo:h14
elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
else
    set guifont=DejaVu\ Sans\ Mono\ 10
endif

" Colors
if has("gui_running")
    set background=dark
    let g:molokai_original = 1
    colorscheme base16-monokai
else
    set t_Co=256  " I can do 256 colors!
    colorscheme Tomorrow-Night-Eighties
endif

" Show hidden characters
"set list
set listchars=tab:▸\ ,eol:¬
" }}}

" Persistent undo {{{
"""""""""""""""""
if has('persistent_undo')
    set undofile
    set undolevels=1000
    set undoreload=10000
endif
" }}}

" Backups {{{
"""""""""
set backup                       " enable backups
set noswapfile
set undodir=$HOME/.vim/tmp/undo/
set backupdir=$HOME/.vim/tmp/backup/
" }}}

" Search options {{{
""""""""""""""""
set incsearch
set hlsearch
set ignorecase
set smartcase
" }}}

" Formatting {{{
""""""""""""
set nowrap         " do not wrap long lines
set autoindent     " indent at the same level of the previous line
set tabstop=4      " use four spaces for tabs
set shiftwidth=4
set softtabstop=4
set expandtab      " spaces, not tabs
set textwidth=79   " wrap lines after 79 characters
" }}}

" Key mappings {{{
""""""""""""""
" Use comma instead of \ for leader
let mapleader=","
let maplocalleader="\\"

" To normal mode with jk
inoremap jk <Esc>

" One less key stroke to enter commands
nnoremap ; :

" Toggle search highlighting
nnoremap <silent> <leader><space> :set invhlsearch<CR>

" Yank to end of line with Y
nnoremap Y y$

" Move between screen lines, not real lines
nnoremap j gj
nnoremap k gk

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Insert new lines without entering insert mode
nnoremap <leader>a O<Esc>
nnoremap <leader>b o<Esc>

" Close/open folds with space
nnoremap <space> za

" Move between matching brackets with tab in normal mode
nnoremap <tab> <s-%>

" Open file in Marked
nnoremap <leader>m :silent !open -a Marked.app '%:p'<CR>

" Quickly edit/reload vimrc file
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>

" Quickly edit agenda
nnoremap <silent> <leader>a :e $HOME/agenda.txt<CR>

" Toggle numbering and fold column on and off.
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>

" Press <F3> to delete all trailing spaces in a file.
nnoremap <silent> <F3> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Toggle spell checking
nnoremap <F1> :set spell!<CR>

" Fugitive plugin keymaps
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
" }}}

" Completion {{{
""""""""""""
" Enable omni completion.
augroup omnigroup
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END
let g:SuperTabDefaultCompletionType = "context"
" }}}

" Netrw {{{
let g:netrw_winsize = 70  " When opening in vertical split, use 70% for file
let g:netrw_altv = 1      " Keep Netrw in the left window
let g:netrw_sort_by        = 'time'
let g:netrw_sort_direction = 'reverse'
" }}}

" Filetype specific options {{{
"""""""""""""""""""""""""""
" Proper filetype for LaTeX
let g:tex_flavor = "latex"

" Markdown
augroup markdownmd
    autocmd!
    autocmd BufNewFile,BufRead *.md set ft=markdown
augroup END
let g:markdown_fenced_languages = ["css", "python", "c", "cpp", "sh", "tex", "r", "javascript"]

" Use free format Fortran (yay 21st century)
let fortran_free_source=1

" Fold on marker in vimscript files
augroup filetype_vim
    autocmd!
    autocmd Filetype vim setlocal foldmethod=marker
augroup END
" }}}

" Notes with vim-pad {{{
""""""""""""""""""""
let g:pad#dir = "/Users/loic/Notebook"
let g:pad#window_height=12
let g:pad#open_in_split=0
let g:pad#search_backend="/usr/local/bin/ggrep"
" }}}

" Pandoc mode {{{
let g:pandoc#formatting#mode = "ha"
" }}}

" Vim-R-Plugin {{{
" sample settings for vim-r-plugin and screen.vim
" Installation 
"       - Place plugin file under ~/.vim/
"       - To activate help, type in vim :helptags ~/.vim/doc
"       - Place the following vim conf lines in .vimrc
" Usage
"       - Read intro/help in vim with :h vim-r-plugin or :h screen.txt
"       - To initialize vim/R session, start screen/tmux, open some *.R file in
"       vim and then hit F2 key
"       - Object/omni completion command CTRL-X CTRL-O
"       - To update object list for omni completion, run :RUpdateObjList
" My favorite Vim/R window arrangement 
"tmux attach
"Open *attach.R file in Vim and hit F2 to open R
"Go to R pane and create another paneane with C-a %
"Open second R session in new pane
"Go to vim pane and open a new viewport with :split *.R
" Useful tmux commands
"       tmux new -s <myname>       start new session with a specific name
"tmux ls (C-a-s)             list tmux session
"       tmux attach -t <id>        attach to specific session  
"       tmux kill-session -t <id>  kill specific session
" C-a-: killill-session         kill a session
" C-a %                      split  pane vertically
"       C-a "                      split pane horizontally
" C-a-o                      jump cursor to next pane
"C-a C-o                         swap panes
" C-a-: resize-pane -L 10    resizes pane by 10 to left (LaTeX R U D)
" Corresponding Vim commands
" :split or :vsplit      split Vimewport
" C-w-w                  jump cursor to next pane-
" C-w-r                       swap viewports
" C-w C-++               resize viewports to equal split
" C-w 10+                increase size of current pane by value


augroup filetype_r
    autocmd!
    " To open R in terminal rather than RGui (only necessary on OS X)
    autocmd Filetype r let vimrplugin_applescript = 0
    autocmd Filetype r let vimrplugin_screenplugin = 0
    " For tmux support
    autocmd Filetype r let g:ScreenImpl = 'Tmux'
    autocmd Filetype r let vimrplugin_screenvsplit = 1 " For vertical tmux split
    autocmd Filetype r let g:ScreenShellInitialFocus = 'shell' 
    " instruct to use your own .screenrc file
    autocmd Filetype r let g:vimrplugin_noscreenrc = 1
    " For integration of r-plugin with screen.vim
    autocmd Filetype r let g:vimrplugin_screenplugin = 1
    " Don't use conque shell if installed
    autocmd Filetype r let vimrplugin_conqueplugin = 0
    " map the letter 'r' to send visually selected lines to R 
    autocmd Filetype r let g:vimrplugin_map_r = 1
    " see R documentation in a Vim buffer
    autocmd Filetype r let vimrplugin_vimpager = "no"
    " start R with F2 key
    autocmd Filetype r map <F2> <Plug>RStart 
    autocmd Filetype r imap <F2> <Plug>RStart
    autocmd Filetype r vmap <F2> <Plug>RStart
    " send selection to R with space bar
    autocmd Filetype r vmap <Space> <Plug>RDSendSelection 
    " send line to R with space bar
    autocmd Filetype r nmap <Space> <Plug>RDSendLine
augroup END
" }}}

